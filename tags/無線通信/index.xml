<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>無線通信 on Happy RC Blog !</title>
    <link>https://tomokiikegami.github.io/Happy_RC.github.io/tags/%E7%84%A1%E7%B7%9A%E9%80%9A%E4%BF%A1/</link>
    <description>Recent content in 無線通信 on Happy RC Blog !</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 08 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://tomokiikegami.github.io/Happy_RC.github.io/tags/%E7%84%A1%E7%B7%9A%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第12回-アプリデザインに関するTips]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2023/04/08/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2023/04/08/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. アプリのデザイン変更  2.1. スイッチの色を変える 2.2. スライダの色を変える 2.3. ボタン形状を変更 2.4. ボタン背景画像の追加 2.5. 画面背景画像の追加   3. 完成！ 4. 補足：背景画像を作るときのコツ  4.1. 画像を作る前に ～ピクセルとは～ 4.2. ボタン背景 4.3. 画面背景   5. サンプルファイル   1. 今回やりたいこと 　前回まではボタンやスライダを配置しただけなので無垢な感じでした（笑）
　せっかくアプリを自作しているので、自分好みのデザインに改良したいものです。
　今回はデザインの変更例を紹介します！
  ☝　アプリを好みのデザインにカスタム！  2. アプリのデザイン変更 　MIT App Inventorでは、アプリのデザインを変更する機能が豊富に用意されています。今回はその中のいくつかの機能を紹介します！
　今回の作業は Happy_RC_Driver_7b のApp Inventor プロジェクトファイルを使って行いました。こちらのリンクからプロジェクトファイル（.aia）をダウンロードできます。
　ダウンロードした .aia ファイルをApp Inventorで「プロジェクト＞ローカルコンピューターからプロジェクト（.aia）をインポート」とすれば、デザイン作業から始めることができます。</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第11回-接続状態表示のバグ修正]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2023/04/03/</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2023/04/03/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. 改良版アプリ ～ver.7b～  2.1. 外観 2.2. 中身   3. サンプルファイル 4. 参考文献   1. 今回やりたいこと 　前回までのアプリ（ver.7a）では、RCカー側に搭載されている受信機（ESP32マイコン）の電源が切れたときの状況を考慮していませんでした。
　前回のアプリだと受信機電源が切れても、表示が「RCに接続済み」のままでした。（これはまずいw）
　今回は接続状態（つながっているか/切れているか）によって、スマホアプリの表示が切り替わるように（アプリ側のみを）改良しました！
  ☝　接続状態によって表示を変更  2. 改良版アプリ ～ver.7b～ 2.1. 外観 　こちらが改良後のアプリです。外観は ver.7a とほとんど変わっていませんが、実は細かい改良点があります（笑）
  画面上部の接続状態表示を変更（英語にして絵文字を追加）
  接続ボタンの表示を「CONNECT」と短くシンプルにした（今までは「ここにタッチして接続機器を選ぶ」という横長なボタンだった）
  スロットルのスライダ長さを調整（縦に長すぎたので）
  ステアのスライダを短くして右側に寄せた（左折時に、スロットルとステアを操作する指が干渉して操作しにくかったから）
  ST.TRIM のプラスマイナスボタンの文字を半角から全角に変更（ー＋のボタンサイズがそろって操作しやすい。あとボタンが大きくなる）
  STOPボタンを大きくした（即座に停止動作をしやすいように）
  ☝　アプリ外観（デザイン編集タブ）    2.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第10回-スライダ操作式のラジコンアプリに]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2023/03/16/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2023/03/16/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. 動作原理 3. 改良の過程  3.1. スマホアプリの改良  3.1.1. アプリの全体像 3.1.2. ステアリングトリム（ST. TRIM）機能 3.1.3. 動作方向反転（ST. REV、TH. REV）機能   3.2. レシーバ側プログラムの改良   4. 実験動画 5. サンプルファイル 6. 参考文献   1. 今回やりたいこと 　今まで（本連載の4～9回）は9つのボタンを押すことでラジコンを操縦していました。このボタン式のコントローラだと滑らかに操縦ができません(;^ω^)
　今回からスライダ式に変更して、滑らかに操縦できるようにしました！
  ☝　ボタン式からスライダ式に（本格的！！）  2. 動作原理 　基本的な動作原理はこちらの記事で紹介したものと同じですが、今回はステアだけでなくスロットルの信号も追加しました。これでラジコンのハンドルとアクセルの両方が操作できるようになります。（下図）
  ☝　サーボモータとESCのPWM制御  　動作原理を下の図にまとめました。ステアの信号をCH1、スロットルの信号をCH2とします。
　大まかな処理手順は、
 スマホアプリ側からステア、スロットルの信号を1つの文字列として送信（ステア、スロットル信号はカンマ(,)で区切る） マイコン側で文字列を受け取り、カンマ(,)で分割1 分割した文字列の左側をCH1(ステア)、右側をCH2(スロットル)の信号とする CH1とCH2の値に基づいてサーボモータとESCをそれぞれ制御し、ステアとスロットルを操作  　となります。ここで、手順1はスマホアプリ側、手順2~4はマイコン(ESP32)側で行っている処理になります。</description>
    </item>
    
    <item>
      <title>ラジコンカー用スピードメータ開発！</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2023/02/20/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2023/02/20/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. シャフト4駆のラジコンカーについて（設計の前に）  2.1. 定番のレイアウト 2.2. 駆動部分を詳細に   3. 設計  3.1. システム概要 3.2. 使った装置  3.2.1. ソフトウェア 3.2.2. ハードウェア   3.3. 車速の計算  3.3.1. 車速の計算原理 3.3.2. 歯数はどうする？ 3.3.3. シャフト周波数（回転数）はどうする？   3.4. 回路設計 3.5. 部品レイアウト   4. 製作  4.1. 回路 4.2. 部品の固定 4.3. スマホアプリ 4.4. プログラム（ソースコード）   5. 実験  5.1. 実験の概要 5.2. 実験動画 5.3. 実験結果   6.</description>
    </item>
    
    <item>
      <title>スマホからサーボモータをPWM制御してみた!!</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2023/01/02/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2023/01/02/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. 使った技術  2.1. PWM制御 2.2. シリアル通信   3. 使ったもの  3.1. ソフトウェア 3.2. ハードウェア   4. 回路図 5. スマホアプリ 6. プログラム（ソースコード） 7. 動作確認 8. サンプルファイル 9. 参考文献   1. 今回やりたいこと 　いやぁ～（※）新年(2023)一発目の投稿ですね!!（※いやぁ～は東北とか北海道の人が使いがちみたいで、私もその一人です笑。特に深い意味はないです笑）
　今回はスマホからラジコン用サーボモータを操作します!
　スマホでスライダを操作し、その操作量に応じてサーボモータの角度をコントロールしました。
　これを作るにあたって、PWM制御とシリアル通信という技術を使ったので、まずはその説明から始めます(^^)/
  ☝　スマホからRCサーボを操作したい  2. 使った技術 2.1. PWM制御 　PWMというのは Pulse Width Modulation の頭文字を取ったものです。日本語に直すとパルス（Pulse）幅（Width）変調（Modulation）となります。と言われてもあんまりしっくり来ないと思うので、図を使って説明します！
　下の図がPWM制御のイメージ図です。このカクカクした波形をパルス波といいます。このパルス幅を変える（図中ではTonの幅を変える）ことで、サーボモータの角度を制御するのがPWM制御です。
　具体的には、ONになってるところのパルス幅を1000~2000[μs]の間（メーカによって異なる1が大体一緒）で変えて制御します。
　例えば、パルス幅が1000[μs]のときは右回転（角度：0°）、1500[μs]のときはニュートラル（角度：90°）、2000[μs]のときは左回転（角度：180°）となります。</description>
    </item>
    
    <item>
      <title>自作アプリでBluetooth接続できない！[Runtime Error]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/12/30/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/12/30/</guid>
      <description>～ 目次 ～   1. 何が起こったか 2. 解決方法   1. 何が起こったか 　MIT App InventorでBluetooth通信するアプリ（ラジコンカー用コントローラー）を作ってテストしていたところ、下の画像のようなエラーが出てきました( ;∀;)( ;∀;)
　使ってる端末は、Moto g pro（OS：Android 12、セキュリティアップデート：2022年12月1日）です。
  ☝　Bluetooth接続しようと「ここをタッチしてRCに接続」ボタンを押したらエラーが....  　説明をよく読むと、Androidの権限が必要みたいです。
2. 解決方法 　次の1~5の手順で、自作アプリに付近のデバイスへのアクセス権限を与えれば良いです。
 アプリのアイコンを長押しして、「アプリ情報」をタップします。    ☝　アプリ情報を開く  「許可」をタップします。    ☝　「許可」をタップ  &amp;ldquo;許可されていないアプリ&amp;quot;の項目にある「付近のデバイス」をタップします。    ☝　付近のデバイス  &amp;ldquo;このアプリによる付近のデバイスへのアクセス&amp;quot;の項目にある「許可」をタップします。    ☝　付近のデバイスにアクセス許可  画面左上の矢印「←」をタップして戻ります。下の画像のように、&amp;ldquo;許可されているアプリ&amp;quot;の項目が「付近のデバイス」になっていればOKです！  　（一度アプリでBluetooth接続すると、下に「過去24時間にアクセス」と表示されます。）
  ☝　設定完了！  　これで、自作アプリでBluetooth接続できるようになります！！</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第9回-外出先でもプログラムを編集したい]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/11/06/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/11/06/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. ArduinoDroidでESP32開発  2.1. アプリのインストール 2.2. ライブラリの追加 2.3. ボードの設定 2.4. プログラムのコンパイル 2.5. 書き込み   3. 参考文献   1. 今回やりたいこと 　この連載では、自作ラジコンコントローラーとレシーバをずっと作ってます(^^)/。
　操縦用スマホアプリはMIT App Inventorで開発しているので外出先でもアプリの修正ができますが、ラジコン（レシーバ）側のマイコン（ESP32）はWindowsのArduino IDEなのでPCが必要です（泣）
　始めはUMPC（超小型のPC、Windowsが使える）を買って対応しようとも思ったのですが、スマホでできることが分かったのでスマホでやることにしました！
　スマホではArduinoDroidというアプリを使います。（これから説明します）
　いろんなアプリでスクショをとったので、画像の大きさがバラバラですが許してください( ;∀;)
2. ArduinoDroidでESP32開発 2.1. アプリのインストール 　AndroidスマホでGoogle Playストアを開いて、「ArduinoDroid」と検索＆インストールします。
  ☝　ArduinoDroidのアイコン  2.2. ライブラリの追加 　サーボモータを制御するために、ESP32用のサーボライブラリを追加します。ここでは、jkb-gitさんの作った「Servo Library for ESP32」1を使わせていただきます。（ありがとうございます）
　このライブラリをGitHubからzip形式でダウンロードしてきます。（ArduinoDroidでは既存のServoライブラリが使えなかった）
　スマホのブラウザ（Google Chrome使用）からGitHubレポジトリのzipをダウンロードするときは、
 ブラウザをPC版サイトに切り替える Gitサイトの「Code」（←緑色）を押して、「Download zip」を押す。 スマホのDownloadsフォルダに「ESP32Servo-master.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第8回-ターボ機能を追加]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/10/09/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/10/09/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. 改良の過程  2.1. スマホアプリの改良 2.2. レシーバ側プログラムの改良   3. サンプルファイル   1. 今回やりたいこと 　前回は自作Rcレシーバ（Happy RC Receiver）を実際のラジコンに搭載できるように、ユニバーサル基板を使って回路を小型化しました。
　今回は前々回に引き続き、レシーバ側のプログラムと操作用アプリの改良を行います‼
　現状では走行時のスピードを1つしか設定することができないので、今回は2種類の速度を切り替えられるようにします！ 2. 改良の過程 　使った装置は前回と同じです。今回のバージョンは6c（前々回は6a,6b）とします。
2.1. スマホアプリの改良 　改良したアプリは下の画像のようになります。
　前進ボタン（↑）を長押しするとターボモード（全開走行）に切り替わります。このとき画面の色が赤くなるようにしました（3倍速??）
　ターボモードはPボタンを押すか、後退ボタン（↓）を長押しすると解除することができます(&amp;lsquo;ω&amp;rsquo;)ノ
  ☝　アプリ外観（デザイン編集タブ）    ☝　アプリの中身（ブロック編集タブ）  2.2. レシーバ側プログラムの改良 　ver6aを改良したソースコードがこちらです。
　スマホアプリから&amp;quot;J&amp;quot;が送られてきたときは全開走行、&amp;ldquo;C&amp;quot;か&amp;quot;K&amp;quot;が送られてきたときは標準の速度（自分で設定した速度）に戻す仕組みです。
⇩⇩⇩ ソースコード ⇩⇩⇩  /* Happy_RC_Receiver(version 6c) ***************************** Download a Transmitter App:https://github.com/TomokiIkegami/Happy_RC_Driver/raw/main/Happy_RC_Driver.apk About this Project:https://github.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第7回-回路をシンプル＆コンパクトに]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/29/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/29/</guid>
      <description>～ 目次 ～   1. 今回やったこと 2. シンプルにした回路図 3. 小型な回路を作る  3.1. 使ったもの 3.2. 作業手順   4. 車体に取り付け 5. サンプルファイル   1. 今回やったこと 　今まではジャンパ線で回路の配線をしていて、見た目がかなりゴチャゴチャしてました(;&amp;lsquo;∀&amp;rsquo;)
　今回はユニバーサル基板を使って、ゴチャゴチャしてた配線をスッキリします！（一番下の画像みたいに）
  ☝　自作RCレシーバの変遷  2. シンプルにした回路図 　下の画像がその回路図です。
　前々回の回路と違って、サーボの電源がマイコン（ESP32）からESCの内臓UBECから供給しています。
　こうするとサーボをよりパワフルに（供給電圧が5Vから6Vにアップ）動かせます。さらにマイコンに過剰な電流が流れないので、マイコンに優しくなって動作も安定しました。
  ☝　サーボモータ＆ESC制御用回路  3. 小型な回路を作る 　回路図を参考に実際の回路を作っていきます！
3.1. 使ったもの   ESP32-WROOM-32E
  ユニバーサル基板（ELPA:HK-PKW01H）
  ピンソケットとピンヘッダ（Amazonのリンク）
  エナメル線（ELPA:PP-07NH）
  ☝　用意したもの    3.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第6回-動きを滑らかに]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/27/</link>
      <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/27/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. 改良の過程  2.1. ◆ ver.6a ～delay()を使ってゆっくり動かす～ 2.2. ◆ ver.6b ～millis()を使ってゆっくり動かす～   3. 参考資料   1. 今回やりたいこと 　前回は安全性をアップさせるためにラジコンカーの停止処理を工夫しました。
　前回は動きがカクカクだったので、今回は滑らかに動くように改良します！
2. 改良の過程 　この記事のタイトルは ”bluetoothモジュールで&amp;hellip;&amp;quot; となっていますが、今回もESP32を使ってBluetooth接続をします。
　装置やアプリ（Happy_RC_Driver_5b）は前回と同じです。
  ☝　アプリ外観（デザイン編集タブ）    ☝　アプリの中身（ブロック編集タブ）  2.1. ◆ ver.6a ～delay()を使ってゆっくり動かす～　 　こちらがArduinoマイコンに書き込んだソースコードです。
　setup文の上にある、change_ST_pos,change_TH_pos という関数がそれぞれステア、スロットルを操作する関数です。forループで角度を1°ずつ変化させて操作します。
　角度の変化をdelayで遅らせてゆっくり動かしていますが、これだと加減速中・ステア操作中に操作が効きません（笑）
⇩⇩⇩ ソースコード ⇩⇩⇩  /* Happy_RC_Receiver(version 6a) ***************************** Download a Transmitter App:https://github.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第5回-安全性の向上]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/08/30/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/08/30/</guid>
      <description>～ 目次 ～   1. 前回までの課題 2. なぜ遅延が起こったのか 3. フォーラムの内容 4. 改良の過程  4.1. ◆ ver.5a ～ESP32用にプログラムと回路を変更～  4.1.1. 使ったもの 4.1.2. 作った回路 4.1.3. ソースコード 4.1.4. スマホアプリ   4.2. ◆ ver.5b ～ESP32用にプログラムと回路を変更～  4.2.1. ソースコード 4.2.2. スマホアプリ     5. サンプルファイル 6. 使い方  6.1. 手順 6.2. トラブルシューティング   7. 謝辞 8. 参考資料   1. 前回までの課題 　前回はRCの操作性を向上させるために色々工夫をしました。
　記事の最後のほうでは、bluetooth通信に謎の遅延が発生する問題について触れました。
　まずは、この問題について調べた内容や解決策について書きます！
2. なぜ遅延が起こったのか 　今私の試している装置（bluetoothモジュール）では、「2秒間送受信→2秒間お休み→2秒間送受信→…（繰り返し）」という謎の動きをします。</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第4回-操作性の向上]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/08/20/</link>
      <pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/08/20/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. 実際にやった改良の流れ 3. 改良の過程  3.1. ◆ ver.2 ～とりあえず文字打ち込みはやめよう～  3.1.1. スマホアプリ 3.1.2. マイコンプログラム   3.2. ◆ ver.3 ～片手で操作したいな～  3.2.1. スマホアプリ 3.2.2. マイコンプログラム   3.3. ◆ ver.4 ～ver.3の改良版～  3.3.1. スマホアプリ 3.3.2. マイコンプログラム     4. 課題点と今後に向けて 5. サンプルファイル 6. 参考資料   1. 今回やりたいこと 　前回は MIT App Inventor を使ってラジコン操縦アプリの試作を行いました。
　前回作成したスマホアプリは、スマホキーボードから文字を打ち込んで（前進なら&amp;quot;F&amp;quot;、右折なら&amp;quot;R&amp;quot;、停止なら&amp;quot;N&amp;quot;など）操縦するというものでした（笑）。
　実際これでラジコンを操縦してみると、全然操縦できませんでした！
　今回はコントローラー側のアプリとマイコン側のプログラム（ラジコンに搭載している）を改良します(^^)/
　実験に使った装置は前回と全く同じになります。</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第3回-ESCを使ったモータ駆動＆スマホ向けコントローラアプリ試作]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/15/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/15/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. ESCについて 3. ハードウェアのセットアップ  3.1. 使ったもの 3.2. 作った回路 3.3. ソースコード   4. ソフトウェア（操作用アプリ）のセットアップ  4.1. アプリ開発環境 4.2. 試作したアプリ   5. 動画 6. 参考資料   1. 今回やりたいこと 　前回はサーボモータの電源問題を解決したので、ラジコンのステアをサクサク動かせるようになりました。
　ステアを操作するだけではラジコンは走行できないので、今回は駆動用のモータを制御したいと思います。モータの駆動にはESCという装置を使います。
2. ESCについて 　Electronic Speed Controller の略で、ラジコンのモータの回転速度を制御するために使われる装置です。昔のラジコンではスピコン（Mechanical speed controllers1）という装置を使っていましたが、現在はこのESCを使われています。
　ESCは FET （電界効果トランジスタ） という素子を使ってスイッチングを行う2ことで、モータにかかる電圧をコントロールしています。電圧が大きくなればモータの回転速度は速くなり、小さくなればゆっくりになります。
　スピコンではモータにかかる電圧小さくするときに、抵抗器で熱としてエネルギーを捨てるのがESCとの大きな違いです。
3. ハードウェアのセットアップ 3.1. 使ったもの 　今回の実験で使ったハードウェアをリストアップしておきます。ESCが増えた以外は前回と全く同じです。操作に使ったアプリはこの記事の後半に紹介します。
 マイコン：Arduino UNO モバイルバッテリー：SANYO KBC-L54D (3.7V Li-ion 5400mAh ※INPUT,OUTPUT=5.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第2回-RCサーボ用の電源回路追加]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/12/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/12/</guid>
      <description>～ 目次 ～   1. UBECを使って電源を供給 2. UBECについて 3. 実験の内容  3.1. 使ったもの 3.2. 作った回路 3.3. ソースコード   4. 動画 5. 参考文献   1. UBECを使って電源を供給 　前回はサーボモータを無線で操作しましたが、サーボモータの動きがイマイチでした。（笑）
　そこで今回はサーボモータの電源をUBECで供給することを考えました。BECはRCクローラーなどをやる人は馴染みのある装置だと思います。
2. UBECについて 　Universal Battery Elimination Circuit の略で、スイッチングレギュレータ1の一種です。BECはESCの中に内臓されていることがほとんどで、わざわざ外付けのものを使わなくても問題なく動きます。
　単にBECと呼ばれるものは、リニアレギュレータ2を使用しているものが多いみたいで、発熱が大きくなったり、扱える電圧・電流を（スイッチングレギュレータに比べて）は小さい3というデメリットがあります。
　外付けのUBECを使うことでレシーバーがサーボモータへ送る電流を大きくできたり、ESCの発熱を抑えることができる1などメリットが多いようです。
3. 実験の内容 3.1. 使ったもの 　前回の記事では、使った装置について書いていなかったので整理しておきます。
 マイコン：Arduino UNO モバイルバッテリー：SANYO KBC-L54D (3.7V Li-ion 5400mAh ※INPUT,OUTPUT=5.0V) バッテリー（サーボモータ用）：Dynamite Speedpack (7.2V Ni-MH 700mAh) サーボモータ：Hitec DB777WP UBEC：Hobbywing 3Amp Switch-Mode UBEC  3.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第1回-RCサーボの制御]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/27/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/27/</guid>
      <description>～ 目次 ～   1. 最終的にやりたいこと 2. 実験準備  2.1. システムの概要 2.2. 回路図 2.3. ソースコード   3. 動作実験結果 4. 参考文献   1. 最終的にやりたいこと 　最終的には、ラジコンのコントローラを作ることを目指しています。そのためには無線通信でRC装置を動かせるようになる必要があります。
　今回はその基礎として、PCをコントローラ、マイコン+Bluetoothモジュール をRC受信機と考えて実験を行いたいと思います。
2. 実験準備 2.1. システムの概要 　下の図は使用する装置、ぞれぞれの装置の役割を整理したものです。
  図：システムの概要  　PCから無線通信（Bluetooth）でArduinoへ信号を送り、ArduinoでサーボモータやESCの制御を行いたいと思います。
　BluetoothモジュールはHC-05※と呼ばれるものを使用しました。Amazonに1000円くらいで売っています。
　※ HC-05は技適マークがついていないので、屋内で実験目的として使用する程度にしたほうがよいです。
　ArduinoとHC-05を使用してLEDを点灯させる回路を作っている記事1,2がいくつかあったので、そちらを参考にして回路を作成しました。
2.2. 回路図 　まずはRCサーボのみを無線通信で制御する回路をつくりました（下図参照）。マイコンへの5V電源（モバイルバッテリー）は省略しています。
　この回路では、サーボ用の電源を3.3[V]にしていますが、実際のRCでは6[V]で動かしていることが多いです。（ハイボルテージといって7.4[V]で動かす場合もあります）
  図：サーボモータ制御用の回路  　Bluetoothモジュールの動作用とサーボ駆動用の電源を別にしたかった※ので、このような（不思議な）回路になっています。しかしこれではトルクが足りません（笑）。とりあえず今回はこれでいきたいと思います。
※ Bluetoothモジュールとサーボモータで5V電源を共有すると、サーボモータが動いたときに通信が途切れてしまいました。
2.3. ソースコード 　こちらがArduinoマイコンに書き込んだソースコードです。
　サーボモータの制御には、VarSpeedServo.h3というライブラリを使いました。このライブラリは、サーボモータの回転速度も変更できるのがすごく便利です。</description>
    </item>
    
  </channel>
</rss>
