<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ラジコン on Happy RC Blog !</title>
    <link>https://tomokiikegami.github.io/Happy_RC.github.io/categories/%E3%83%A9%E3%82%B8%E3%82%B3%E3%83%B3/</link>
    <description>Recent content in ラジコン on Happy RC Blog !</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 06 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://tomokiikegami.github.io/Happy_RC.github.io/categories/%E3%83%A9%E3%82%B8%E3%82%B3%E3%83%B3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第9回-外出先でもプログラムを編集したい]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/11/06/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/11/06/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. ArduinoDroidでESP32開発  2.1. アプリのインストール 2.2. ライブラリの追加 2.3. ボードの設定 2.4. プログラムのコンパイル 2.5. 書き込み   3. 参考文献   1. 今回やりたいこと 　この連載では、自作ラジコンコントローラーとレシーバをずっと作ってます(^^)/。
　操縦用スマホアプリはMIT App Inventorで開発しているので外出先でもアプリの修正ができますが、ラジコン（レシーバ）側のマイコン（ESP32）はWindowsのArduino IDEなのでPCが必要です（泣）
　始めはUMPC（超小型のPC、Windowsが使える）を買って対応しようとも思ったのですが、スマホでできることが分かったのでスマホでやることにしました！
　スマホではArduinoDroidというアプリを使います。（これから説明します）
　いろんなアプリでスクショをとったので、画像の大きさがバラバラですが許してください( ;∀;)
2. ArduinoDroidでESP32開発 2.1. アプリのインストール 　AndroidスマホでGoogle Playストアを開いて、「ArduinoDroid」と検索＆インストールします。
  ☝　ArduinoDroidのアイコン  2.2. ライブラリの追加 　サーボモータを制御するために、ESP32用のサーボライブラリを追加します。ここでは、jkb-gitさんの作った「Servo Library for ESP32」1を使わせていただきます。（ありがとうございます）
　このライブラリをGitHubからzip形式でダウンロードしてきます。（ArduinoDroidでは既存のServoライブラリが使えなかった）
　スマホのブラウザ（Google Chrome使用）からGitHubレポジトリのzipをダウンロードするときは、
 ブラウザをPC版サイトに切り替える Gitサイトの「Code」（←緑色）を押して、「Download zip」を押す。 スマホのDownloadsフォルダに「ESP32Servo-master.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第8回-ターボ機能を追加]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/10/09/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/10/09/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. 改良の過程  2.1. スマホアプリの改良 2.2. レシーバ側プログラムの改良     1. 今回やりたいこと 　前回は自作Rcレシーバ（Happy RC Receiver）を実際のラジコンに搭載できるように、ユニバーサル基板を使って回路を小型化しました。
　今回は前々回に引き続き、レシーバ側のプログラムと操作用アプリの改良を行います‼
　現状では走行時のスピードを1つしか設定することができないので、今回は2種類の速度を切り替えられるようにします！ 2. 改良の過程 　使った装置は前回と同じです。今回のバージョンは6c（前々回は6a,6b）とします。
2.1. スマホアプリの改良 　改良したアプリは下の画像のようになります。
　前進ボタン（↑）を長押しするとターボモード（全開走行）に切り替わります。このとき画面の色が赤くなるようにしました（3倍速??）
　ターボモードはPボタンを押すか、後退ボタン（↓）を長押しすると解除することができます(&amp;lsquo;ω&amp;rsquo;)ノ
  ☝　アプリ外観（デザイン編集タブ）    ☝　アプリの中身（ブロック編集タブ）  2.2. レシーバ側プログラムの改良 　ver6aを改良したソースコードがこちらです。
　スマホアプリから&amp;quot;J&amp;quot;が送られてきたときは全開走行、&amp;ldquo;C&amp;quot;か&amp;quot;K&amp;quot;が送られてきたときは標準の速度（自分で設定した速度）に戻す仕組みです。
⇩⇩⇩ ソースコード ⇩⇩⇩  /* Happy_RC_Receiver(version 6c) ***************************** Download a Transmitter App:https://github.com/TomokiIkegami/Happy_RC_Driver/raw/main/Happy_RC_Driver.apk About this Project:https://github.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第7回-回路をシンプル＆コンパクトに]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/29/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/29/</guid>
      <description>～ 目次 ～   1. 今回やったこと 2. シンプルにした回路図 3. 小型な回路を作る  3.1. 使ったもの 3.2. 作業手順   4. 車体に取り付け 5. サンプルファイル   1. 今回やったこと 　今まではジャンパ線で回路の配線をしていて、見た目がかなりゴチャゴチャしてました(;&amp;lsquo;∀&amp;rsquo;)
　今回はユニバーサル基板を使って、ゴチャゴチャしてた配線をスッキリします！（一番下の画像みたいに）
  ☝　自作RCレシーバの変遷  2. シンプルにした回路図 　下の画像がその回路図です。
　前々回の回路と違って、サーボの電源がマイコン（ESP32）からESCの内臓UBECから供給しています。
　こうするとサーボをよりパワフルに（供給電圧が5Vから6Vにアップ）動かせます。さらにマイコンに過剰な電流が流れないので、マイコンに優しくなって動作も安定しました。
  ☝　サーボモータ＆ESC制御用回路  3. 小型な回路を作る 　回路図を参考に実際の回路を作っていきます！
3.1. 使ったもの   ESP32-WROOM-32E
  ユニバーサル基板（ELPA:HK-PKW01H）
  ピンソケットとピンヘッダ（Amazonのリンク）
  エナメル線（ELPA:PP-07NH）
  ☝　用意したもの    3.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第6回-動きを滑らかに]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/27/</link>
      <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/27/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. 改良の過程  2.1. ◆ ver.6a ～delay()を使ってゆっくり動かす～ 2.2. ◆ ver.6b ～millis()を使ってゆっくり動かす～   3. 参考資料   1. 今回やりたいこと 　前回は安全性をアップさせるためにラジコンカーの停止処理を工夫しました。
　前回は動きがカクカクだったので、今回は滑らかに動くように改良します！
2. 改良の過程 　この記事のタイトルは ”bluetoothモジュールで&amp;hellip;&amp;quot; となっていますが、今回もESP32を使ってBluetooth接続をします。
　装置やアプリ（Happy_RC_Driver_5b）は前回と同じです。
  ☝　アプリ外観（デザイン編集タブ）    ☝　アプリの中身（ブロック編集タブ）  2.1. ◆ ver.6a ～delay()を使ってゆっくり動かす～　 　こちらがArduinoマイコンに書き込んだソースコードです。
　setup文の上にある、change_ST_pos,change_TH_pos という関数がそれぞれステア、スロットルを操作する関数です。forループで角度を1°ずつ変化させて操作します。
　角度の変化をdelayで遅らせてゆっくり動かしていますが、これだと加減速中・ステア操作中に操作が効きません（笑）
⇩⇩⇩ ソースコード ⇩⇩⇩  /* Happy_RC_Receiver(version 6a) ***************************** Download a Transmitter App:https://github.</description>
    </item>
    
    <item>
      <title>GS02のタイヤを浮かせたい！</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/12/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/09/12/</guid>
      <description>～ 目次 ～   1. やりたいこと 2. 完成品の寸法 3. 部品の製作  3.1. 使った道具 3.2. 部品① 3.3. 部品②と③   4. 組み立て 5. 取り付けた様子 6. サンプルファイル   1. やりたいこと 　数カ月ぶりに、愛車の GS02bom を見てみるとタイヤが潰れてました( ;∀;)( ;∀;)( ;∀;)。
  ☝　潰れたタイヤのイメージ  　抜けた空気は自然に入らず、変形したタイヤはすぐに戻らないので大変です。（ホイールを組み立て直して、走行すれば段々良くなりますが&amp;hellip;）
　今回はタイヤを浮かせて保管（飾っておける）できるGS02専用の土台を作ってみました！
2. 完成品の寸法 　製作手順を紹介する前に、完成品の寸法をまとめておきます。3Dプリント用の生データが欲しい人は、この記事の最後にあるサンプルファイルをダウンロードして使ってください。
　組み立て図と各部品の寸法は、下の画像のようになります。
　部品②は前（Front）輪用、部品③は後（Rear）輪用です。（この長さを決めるのが大変だったww）
  ☝　組み立て図と部品の寸法  3. 部品の製作 3.1. 使った道具 　今回使った（3Dプリンタ以外の）道具が下の画像になります。
　ドリルチャックとドリルは部品①の穴を仕上げるために使いました。やすりとパイプカッターは部品②、③を作るために使います。
  ☝　使った道具  3.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第5回-安全性の向上]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/08/30/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/08/30/</guid>
      <description>～ 目次 ～   1. 前回までの課題 2. なぜ遅延が起こったのか 3. フォーラムの内容 4. 改良の過程  4.1. ◆ ver.5a ～ESP32用にプログラムと回路を変更～  4.1.1. 使ったもの 4.1.2. 作った回路 4.1.3. ソースコード 4.1.4. スマホアプリ   4.2. ◆ ver.5b ～ESP32用にプログラムと回路を変更～  4.2.1. ソースコード 4.2.2. スマホアプリ     5. サンプルファイル 6. 使い方  6.1. 手順 6.2. トラブルシューティング   7. 謝辞 8. 参考資料   1. 前回までの課題 　前回はRCの操作性を向上させるために色々工夫をしました。
　記事の最後のほうでは、bluetooth通信に謎の遅延が発生する問題について触れました。
　まずは、この問題について調べた内容や解決策について書きます！
2. なぜ遅延が起こったのか 　今私の試している装置（bluetoothモジュール）では、「2秒間送受信→2秒間お休み→2秒間送受信→…（繰り返し）」という謎の動きをします。</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第4回-操作性の向上]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/08/20/</link>
      <pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/08/20/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. 実際にやった改良の流れ 3. 改良の過程  3.1. ◆ ver.2 ～とりあえず文字打ち込みはやめよう～  3.1.1. スマホアプリ 3.1.2. マイコンプログラム   3.2. ◆ ver.3 ～片手で操作したいな～  3.2.1. スマホアプリ 3.2.2. マイコンプログラム   3.3. ◆ ver.4 ～ver.3の改良版～  3.3.1. スマホアプリ 3.3.2. マイコンプログラム     4. 課題点と今後に向けて 5. サンプルファイル 6. 参考資料   1. 今回やりたいこと 　前回は MIT App Inventor を使ってラジコン操縦アプリの試作を行いました。
　前回作成したスマホアプリは、スマホキーボードから文字を打ち込んで（前進なら&amp;quot;F&amp;quot;、右折なら&amp;quot;R&amp;quot;、停止なら&amp;quot;N&amp;quot;など）操縦するというものでした（笑）。
　実際これでラジコンを操縦してみると、全然操縦できませんでした！
　今回はコントローラー側のアプリとマイコン側のプログラム（ラジコンに搭載している）を改良します(^^)/
　実験に使った装置は前回と全く同じになります。</description>
    </item>
    
    <item>
      <title>壊れたRCのギアを作りたい [製作編]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/25/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/25/</guid>
      <description>～ 目次 ～   1. 3Dプリントの流れ 2. 3Dプリント作業の様子  2.1. 3Dモデルの準備 2.2. 印刷用データの作成 2.3. 印刷 2.4. サポート材の除去 2.5. 完成品   3. 組み立て 4. 取り付けた様子 5. 参考文献   1. 3Dプリントの流れ 　前回でギアの設計が終わったので、今回はギアを実際に製作したいと思います。
　本格的なプラスチック歯車なら、射出成形で製造されている1（切削加工で製造している場合もある2）みたいですが、工具と機械をそろえると凄い金額（ノウハウもかなり必要）なってしまいます。
　そこで今回は、3Dプリンタを使ってギアを作ってみます。3Dプリンタを使った方法は付加製造と呼ばれています。
　3Dプリンタにも色々な種類があるのですが、私が使ったプリンタは熱溶解積層方式 （FDM）の機種です。この方式は、高温で融かしたプラスチックを重ねていってモノをつくるやり方です。
　3Dプリンタでモノを作る流れ（一例）をまとめると、
 3Dデータを準備する 3Dデータから印刷用データを作る 印刷用データを使って3Dプリンタで印刷する 余分な材料を除去する 完成  　という感じです。
2. 3Dプリント作業の様子 2.1. 3Dモデルの準備 　下の画像は、前回作成したギアの3DCADモデルになります。
  ☝　完成した3DCADモデル（斜め上から）    ☝　完成した3DCADモデル（斜め下から）  　印刷用データをつくるために、まずはファイル形式を変換します。</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第3回-ESCを使ったモータ駆動＆スマホ向けコントローラアプリ試作]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/15/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/15/</guid>
      <description>～ 目次 ～   1. 今回やりたいこと 2. ESCについて 3. ハードウェアのセットアップ  3.1. 使ったもの 3.2. 作った回路 3.3. ソースコード   4. ソフトウェア（操作用アプリ）のセットアップ  4.1. アプリ開発環境 4.2. 試作したアプリ   5. 動画 6. 参考資料   1. 今回やりたいこと 　前回はサーボモータの電源問題を解決したので、ラジコンのステアをサクサク動かせるようになりました。
　ステアを操作するだけではラジコンは走行できないので、今回は駆動用のモータを制御したいと思います。モータの駆動にはESCという装置を使います。
2. ESCについて 　Electronic Speed Controller の略で、ラジコンのモータの回転速度を制御するために使われる装置です。昔のラジコンではスピコン（Mechanical speed controllers1）という装置を使っていましたが、現在はこのESCを使われています。
　ESCは FET （電界効果トランジスタ） という素子を使ってスイッチングを行う2ことで、モータにかかる電圧をコントロールしています。電圧が大きくなればモータの回転速度は速くなり、小さくなればゆっくりになります。
　スピコンではモータにかかる電圧小さくするときに、抵抗器で熱としてエネルギーを捨てるのがESCとの大きな違いです。
3. ハードウェアのセットアップ 3.1. 使ったもの 　今回の実験で使ったハードウェアをリストアップしておきます。ESCが増えた以外は前回と全く同じです。操作に使ったアプリはこの記事の後半に紹介します。
 マイコン：Arduino UNO モバイルバッテリー：SANYO KBC-L54D (3.7V Li-ion 5400mAh ※INPUT,OUTPUT=5.</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第2回-RCサーボ用の電源回路追加]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/12/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/12/</guid>
      <description>～ 目次 ～   1. UBECを使って電源を供給 2. UBECについて 3. 実験の内容  3.1. 使ったもの 3.2. 作った回路 3.3. ソースコード   4. 動画 5. 参考文献   1. UBECを使って電源を供給 　前回はサーボモータを無線で操作しましたが、サーボモータの動きがイマイチでした。（笑）
　そこで今回はサーボモータの電源をUBECで供給することを考えました。BECはRCクローラーなどをやる人は馴染みのある装置だと思います。
2. UBECについて 　Universal Battery Elimination Circuit の略で、スイッチングレギュレータ1の一種です。BECはESCの中に内臓されていることがほとんどで、わざわざ外付けのものを使わなくても問題なく動きます。
　単にBECと呼ばれるものは、リニアレギュレータ2を使用しているものが多いみたいで、発熱が大きくなったり、扱える電圧・電流を（スイッチングレギュレータに比べて）は小さい3というデメリットがあります。
　外付けのUBECを使うことでレシーバーがサーボモータへ送る電流を大きくできたり、ESCの発熱を抑えることができる1などメリットが多いようです。
3. 実験の内容 3.1. 使ったもの 　前回の記事では、使った装置について書いていなかったので整理しておきます。
 マイコン：Arduino UNO モバイルバッテリー：SANYO KBC-L54D (3.7V Li-ion 5400mAh ※INPUT,OUTPUT=5.0V) バッテリー（サーボモータ用）：Dynamite Speedpack (7.2V Ni-MH 700mAh) サーボモータ：Hitec DB777WP UBEC：Hobbywing 3Amp Switch-Mode UBEC  3.</description>
    </item>
    
    <item>
      <title>使っている3Dプリンタの紹介</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/09/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/09/</guid>
      <description>1. 機種について 　BIBO2 という3Dプリンタです。金属のボディだったり、印刷台がガラスだったりするところがカッコイイです(^^)
  ☝　外観  2. 使ってみた感じ 　まだ付属のフィラメント（PLA）と標準設定でしか印刷してませんが、仕上がりがきれいでびっくりしました。
　エッジも丸くならず、穴もきれいな形状です。積層面同士が強く密着しているのも良いと感じました。
  ☝　作ってみた12mmホイールハブ（斜めから）    ☝　作ってみた12mmホイールハブ（印刷台側の面）  　欠点を挙げるとするなら、動作音が大きいように感じます。（ノズルがあれだけ速く動いていれば、ある程度の音は仕方がないのかなと&amp;hellip;）
3. セットアップについて 3Dプリンタ（BIBO2）組み立て 　私も3Dプリンタ初心者ですが、組み立ては動画のマネをすればできると思います（動画は付属のSDカードに入っています）。ソフト側の設定は少し大変に感じました。
　動画はGoogleドライブからダウンロードすることも可能です。リンクはこちらになります。 https://drive.google.com/file/d/1e02U8qIDgyE1xym4yPbTf_fmFDw2x0-b/view
ソフト（Ultimaker Cura）のセットアップ 　3Dプリンタ用の印刷用データを作るのに Ultimaker Cura というソフトを使います。そのソフト（Ultimaker Cura）をインストールしてから、ソフト上でプリンタの設定と印刷の設定をします。
　SDカードに入っている「How to use BIBO cura settings in Ultimaker Cura for BIBO2」というpdfファイルを見ながら設定をしました。
　インターネット上にもpdfファイルがあがっていたので、リンクを貼っておきます。 https://docero.tips/doc/how-to-use-bibo-cura-settings-in-ultimaker-cura-for-bibo2-14mzo69w00
　設定を一度済ませてしまえば、同じフィラメントの場合は簡単に印刷することができます。</description>
    </item>
    
    <item>
      <title>壊れたRCのギアを作りたい [3Dモデリング編2]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/05/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/03/05/</guid>
      <description>～ 目次 ～   1. 設計作業の続き 2. 完成した3Dモデル 3. 参考文献   1. 設計作業の続き 　前回に引き続き、3Dモデリング作業を進めていきます。前回はギアの大まかな形状を作ることができたので、今回は細かい部分を作りました。
  ☝　前回までの進捗  　大まかな形状は完成していますが、ベベルギアが入る空間がないのでまずはそこを作っていきます。
  ☝　ベベルギア用の穴をあける（スケッチ作成）    ☝　ベベルギア用の穴をあける（ポケットを実行）  　ベベルギアにはシャフトが通っているので、そのシャフトが入る部分を作っていきます。
  ☝　裏面を少し盛る（スケッチ作成）    ☝　裏面を少し盛る    ☝　ベベルギアのシャフトが入る穴（スケッチ作成）    ☝　アイソメ図で見るとこんな感じ    ☝　ベベルギアのシャフトが入る穴ができた（ポケットを実行）    ☝　作った穴をミラーコピーする（ミラーする面を選択）    ☝　ミラーコピー実行後    ☝　これでベベルギアは取り付けられそう  　これで完成にしても良いのですが、せっかくなので文字を切り抜きたいと思います。やり方は、XSim 技術ドキュメントに文字列をソリッド化する方法1が載っていたので、そちらを参考にしました。</description>
    </item>
    
    <item>
      <title>Bluetooth モジュールでRCサーボ・ESCを制御したい [第1回-RCサーボの制御]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/27/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/27/</guid>
      <description>～ 目次 ～   1. 最終的にやりたいこと 2. 実験準備  2.1. システムの概要 2.2. 回路図 2.3. ソースコード   3. 動作実験結果 4. 参考文献   1. 最終的にやりたいこと 　最終的には、ラジコンのコントローラを作ることを目指しています。そのためには無線通信でRC装置を動かせるようになる必要があります。
　今回はその基礎として、PCをコントローラ、マイコン+Bluetoothモジュール をRC受信機と考えて実験を行いたいと思います。
2. 実験準備 2.1. システムの概要 　下の図は使用する装置、ぞれぞれの装置の役割を整理したものです。
  図：システムの概要  　PCから無線通信（Bluetooth）でArduinoへ信号を送り、ArduinoでサーボモータやESCの制御を行いたいと思います。
　BluetoothモジュールはHC-05※と呼ばれるものを使用しました。Amazonに1000円くらいで売っています。
　※ HC-05は技適マークがついていないので、屋内で実験目的として使用する程度にしたほうがよいです。
　ArduinoとHC-05を使用してLEDを点灯させる回路を作っている記事1,2がいくつかあったので、そちらを参考にして回路を作成しました。
2.2. 回路図 　まずはRCサーボのみを無線通信で制御する回路をつくりました（下図参照）。マイコンへの5V電源（モバイルバッテリー）は省略しています。
　この回路では、サーボ用の電源を3.3[V]にしていますが、実際のRCでは6[V]で動かしていることが多いです。（ハイボルテージといって7.4[V]で動かす場合もあります）
  図：サーボモータ制御用の回路  　Bluetoothモジュールの動作用とサーボ駆動用の電源を別にしたかった※ので、このような（不思議な）回路になっています。しかしこれではトルクが足りません（笑）。とりあえず今回はこれでいきたいと思います。
※ Bluetoothモジュールとサーボモータで5V電源を共有すると、サーボモータが動いたときに通信が途切れてしまいました。
2.3. ソースコード 　こちらがArduinoマイコンに書き込んだソースコードです。
　サーボモータの制御には、VarSpeedServo.h3というライブラリを使いました。このライブラリは、サーボモータの回転速度も変更できるのがすごく便利です。</description>
    </item>
    
    <item>
      <title>壊れたRCのギアを作りたい [3Dモデリング編1]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/24/</link>
      <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/24/</guid>
      <description>～ 目次 ～   1. 設計に入る前に  1.1. 前回の振り返り 1.2. 壊れた歯車のモジュールは？   2. FreeCADでギア設計  2.1. Involute gear 機能で大まかな形状を作成 2.2. 細かいところを作っていく   3. 参考文献   1. 設計に入る前に 1.1. 前回の振り返り 　前回はギアの設計に必要な理論を調べました。今回は実際に歯車の設計をしていきたいと思います！
　前回の最後に掲載した計算式1をここにも書いておきます。この式を使っていきます。
\begin{equation} \label{mod_using_da} m = \frac{d_a}{z+2} \end{equation}
1.2. 壊れた歯車のモジュールは？ 　式(\ref{mod_using_da})を使って、歯車のモジュール $m$ を調べてみます。少し大変ですが、壊れた歯車の歯数は地道に数えていきます（笑）。
  ☝　歯車の歯数 $z$ と刃先円直径 $d_a$ を測定  　歯数を数えると $z=62$ [枚] 、刃先円直径は $d_a=38.9$ [mm] （ノギスで測定）でした。 これを計算式に入れて、モジュール $m$ [mm] を計算してみます。</description>
    </item>
    
    <item>
      <title>壊れたRCのギアを作りたい [理論編]</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/23/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/23/</guid>
      <description>～ 目次 ～   1. きっかけ 2. FreeCADでギア設計するには 3. ギア設計に必要な理論  3.1. 歯車の大きさを表す指標  3.1.1. ピッチ（pitch） 3.1.2. モジュール（module） 3.1.3. ピッチ（pitch）と モジュール（module）の関係   3.2. RCの世界で使われているピッチとモジュール 3.3. 欠けたギアからモジュールを計算   4. 参考文献   1. きっかけ 　古い1/12カー(Tamiya RM Mk.5Tamiya RM Mk.7)を屋外で走行させていたところ、後輪を駆動するスパーギアが破損して走行出来なくなってしまいました。
　かなり昔の車体なので部品の入手が難しく、どうしようか困っていました。
  ☝　後輪駆動部分（ダイレクトドライブの構造になっている）    ☝　分解してスパーギアを取り出した（歯が欠けている）  　3DCADと3Dプリンタを作ってロボットの歯車を設計・製作している人をみたのがきっかけで、ラジコンの歯車を作ってみたい思いました。
2. FreeCADでギア設計するには 　FreeCADではギアを設計するための機能を、標準で使えることが分かりました。（無料ソフトなのにすごい）
　この機能は「Part Design ワークベンチ」の中に入っており、「Involute gear」という名前がついています。（下図参照）
　細かい操作方法はXsimの技術ドキュメント1を参考にして、設計作業を進めていこうと思います。
  図：Involute gear 機能  3.</description>
    </item>
    
    <item>
      <title>3Dプリンタでホイールを作ってみた</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/02/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/02/02/</guid>
      <description>自分でホイールを作ったきっかけ 　初めはホイールを自分で設計・製作することはあまり考えていなかったのですが、買ったタイヤが少し特殊だったのでそれに合わせて設計することにしました。
ボディ変更とタイヤの購入 　クローララジコン ECX Barrage 1.9 純正のボディに満足いかず、PROLINE の F-100 ボディに変更することがありました。そのときに、タイヤを 1.9インチのものから 1.55インチに変更することを考えました。
　ECX Barrage 1.9 の後継機として ECX Barrage Gen2 売られています。Gen2 は ホイールサイズが 1.9 → 1.55インチに変更されていました。そこで、これに使われている純正タイヤを購入しました。
タイヤを買ってから気づいた 　1.55 インチのタイヤなら家にあるホイールを使えば大丈夫だろうと思っていました。しかし、Gen2の純正用タイヤは妙に内側のゴムが厚いことに気付いてしまいました。（買っておいたホイール使えない&amp;hellip;笑）
しょうがない。自分で作ろう！ 　学校で機械設計、3DCADと3Dプリンタの勉強をしていたので、ラジコンのホイールを自分で設計することにしました。
設計作業 使ったソフト 　ホイールの設計には3DCADソフトを使うことにしました。学校で使用しているのは SolidWorks というCADソフトなのですが、非常に高価（調べると100万くらい？）なので趣味使うのはハードルが高いです。
　そこで、趣味で使えそうな無料ソフトを色々調べた結果、FreeCADを使うことにしました。他に色々なCADがあるなかで、FreeCADにした理由は、
 オープンソースである ずっと無料で使える 機能に全く制限がなく、拡張機能が充実している（有料版が存在しない）  　などです。使い方は図書館で本を借りて勉強しました。インターネットでも情報がたくさんあるのが嬉しいところです。フォーラムにも参考になるテクニックがたくさんあります。
3Dモデリング作業 　下の写真がモデリング中の様子になります。回転押し出しやブーリアン演算を駆使して形状を作っていきます。
 ベースの形状（円柱）☝
            完成した3Dモデル☝
3Dプリント 　家に3Dプリンタがなかったので、ShapeWays という3Dプリントサービスを使うことにしました。ShapeWays に3Dデータをアップロードすると、完成品を購入することが出来ます。</description>
    </item>
    
    <item>
      <title>ポリカボディ風の3Dモデルを作る</title>
      <link>https://tomokiikegami.github.io/Happy_RC.github.io/2022/01/27/</link>
      <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tomokiikegami.github.io/Happy_RC.github.io/2022/01/27/</guid>
      <description>なぜこれをやろうと思ったのか？ 　京商のOutlaw rampage Pro を購入したときに、ボディ塗装のデザインに悩んだことがきっかけです。 ラジコンのポリカボディは再塗装が難しい(透明なボディ裏面から塗装を重ねていく)ので、失敗したくないと思い、PC上で塗装結果をイメージ出来たら良いと考えました。
　そこで FreeCAD（オープンソースの3DCADソフト）を使って、ラジコンのボディを作ってみることにしました。
FreeCADでボディ形状作成 製作過程 　FreeCADのサーフェス機能を使って、モデリングを行いました。サーフェス機能の使い方はこちらの記事が参考になりま した。
　製作の流れとしては、
 ボディ側面をFront面（正面）作成 ボディ側面をFront面からずらす（ボディ横幅の半分） ボディ側面をFront面に対してミラーコピー 2つのボディ側面の間に、ボンネットや屋根、窓ガラス、グリル、バンパーを作る 4で作った部分と側面を結合して完成  　という感じで進めました。
 側面を作っている様子☝（面の作成に失敗すると、画像のように変な突起が飛び出すことがありますw）
 完成した側面☝
 ミラーコピーした側面☝
 フロントウィンドウ作成中の様子☝
 おまけ☝（3Dモデルの結合に失敗して、側面が3つ出てきたw）
3DCADモデル完成 　ポリカボディのように薄い3Dモデルになったので、リアル感が出て良かったと思います。
 ボディ斜め前方から☝
 ボディ斜め後方から☝
 ボディ裏面の様子☝（薄いボディなのがよくわかると思います）
色を塗ってみる blenderで着色 　作成した3DCADデータからstl形式で3Dモデルを出力して、色塗りをしました。 初めはblenderで色をつけてみましたが、初心者の私にとっては操作が難しく、ポリゴンごとに着色するのが限界でした。
 法線ベクトル※ で面の向きを確認出来ます☝（水色のヒゲみたいなのが法線ベクトルです）
※法線ベクトル：面から垂直に出る矢印のこと。コンピュータグラフィックス用語。
 blenderで着色☝（斜め前方から）
 blenderで着色☝（斜め後方から）
ペイント3Dで着色 　最終的にペイント3Dを使って塗装イメージを作ることにしました。絵の具で色を塗るような雰囲気で、地道に3Dモデルを塗装していきます（笑）。
　色塗りだけでは雰囲気が出ないので、2DCAD（jw_CAD）で作成したテクスチャ（3Dモデル表面に貼る画像）を貼り付けました。
 ペイント3Dで色を塗る☝（はみ出さないようにする感じが筆塗りみたい）
 jw_CADで作ったウィンドウのテクスチャ☝
 テクスチャを貼り付ける様子☝
完成した3Dモデル 　出来上がった塗装イメージは下の画像のような感じです！</description>
    </item>
    
  </channel>
</rss>
